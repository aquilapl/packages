From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Thu, 7 Nov 2024 18:22:16 -0600
Subject: [PATCH] solus: Adapt to our amdgpu kernel argument

Signed-off-by: Reilly Brogan <reilly@reillybrogan.com>
---
 lact-client/src/lib.rs                |  2 -
 lact-daemon/src/server.rs             |  2 -
 lact-daemon/src/server/system.rs      | 86 ++++-----------------------
 lact-gui/src/app.rs                   | 57 ------------------
 lact-gui/src/app/header.rs            |  3 +-
 lact-gui/src/app/msg.rs               |  2 -
 lact-gui/src/app/pages/oc_page/mod.rs | 20 ++-----
 lact-schema/src/request.rs            |  2 -
 8 files changed, 17 insertions(+), 157 deletions(-)

diff --git a/lact-client/src/lib.rs b/lact-client/src/lib.rs
index d327850..e99d1bf 100644
--- a/lact-client/src/lib.rs
+++ b/lact-client/src/lib.rs
@@ -129,8 +129,6 @@ impl DaemonClient {
     }
 
     request_plain!(get_system_info, SystemInfo, SystemInfo);
-    request_plain!(enable_overdrive, EnableOverdrive, String);
-    request_plain!(disable_overdrive, DisableOverdrive, String);
     request_plain!(generate_debug_snapshot, GenerateSnapshot, String);
     request_plain!(reset_config, RestConfig, ());
     request_plain!(list_profiles, ListProfiles, ProfilesInfo);
diff --git a/lact-daemon/src/server.rs b/lact-daemon/src/server.rs
index 7668f81..072c5a2 100644
--- a/lact-daemon/src/server.rs
+++ b/lact-daemon/src/server.rs
@@ -168,8 +168,6 @@ async fn handle_request<'a>(request: Request<'a>, handler: &'a Handler) -> anyho
         Request::SetProfile { name } => ok_response(handler.set_profile(name).await?),
         Request::CreateProfile { name, base } => ok_response(handler.create_profile(name, base)?),
         Request::DeleteProfile { name } => ok_response(handler.delete_profile(name).await?),
-        Request::EnableOverdrive => ok_response(system::enable_overdrive().await?),
-        Request::DisableOverdrive => ok_response(system::disable_overdrive().await?),
         Request::GenerateSnapshot => ok_response(handler.generate_snapshot().await?),
         Request::ConfirmPendingConfig(command) => {
             ok_response(handler.confirm_pending_config(command)?)
diff --git a/lact-daemon/src/server/system.rs b/lact-daemon/src/server/system.rs
index c972ccc..4bd8ef1 100644
--- a/lact-daemon/src/server/system.rs
+++ b/lact-daemon/src/server/system.rs
@@ -15,6 +15,7 @@ static OC_TOGGLED: AtomicBool = AtomicBool::new(false);
 
 const PP_OVERDRIVE_MASK: u64 = 0x4000;
 pub const PP_FEATURE_MASK_PATH: &str = "/sys/module/amdgpu/parameters/ppfeaturemask";
+pub const OVERDRIVE_ENABLED_PATH: &str = "/sys/module/amdgpu/parameters/overdrive_enabled";
 pub const MODULE_CONF_PATH: &str = "/etc/modprobe.d/99-amdgpu-overdrive.conf";
 
 pub async fn info() -> anyhow::Result<SystemInfo> {
@@ -36,7 +37,9 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
         .trim()
         .to_owned();
 
-    let amdgpu_overdrive_enabled = if let Ok(mask) = read_current_mask() {
+    let amdgpu_overdrive_enabled = if let Ok(true) = is_overdrive_enabled_flag() {
+        Some(true)
+    } else if let Ok(mask) = read_current_mask() {
         Some((mask & PP_OVERDRIVE_MASK) > 0)
     } else {
         None
@@ -51,63 +54,6 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
     })
 }
 
-pub async fn enable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    let current_mask = read_current_mask()?;
-
-    let new_mask = current_mask | PP_OVERDRIVE_MASK;
-    if new_mask == current_mask {
-        return Err(anyhow!("Overdrive mask already enabled"));
-    }
-
-    let conf = format!("options amdgpu ppfeaturemask=0x{new_mask:X}");
-
-    let mut file = File::create(MODULE_CONF_PATH).context("Could not open module conf file")?;
-    file.set_permissions(Permissions::from_mode(0o644))
-        .context("Could not conf file permissions")?;
-
-    file.write_all(conf.as_bytes())
-        .context("Could not write config")?;
-
-    let message = match regenerate_initramfs().await {
-        Ok(initramfs_type) => {
-            OC_TOGGLED.store(true, Ordering::SeqCst);
-            format!("Initramfs was successfully regenerated (detected type {initramfs_type:?})")
-        }
-        Err(err) => format!("{err:#}"),
-    };
-
-    Ok(message)
-}
-
-pub async fn disable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    if Path::new(MODULE_CONF_PATH).exists() {
-        fs::remove_file(MODULE_CONF_PATH).context("Could not remove module config file")?;
-        match regenerate_initramfs().await {
-            Ok(initramfs_type) => {
-                OC_TOGGLED.store(true, Ordering::SeqCst);
-                Ok(format!(
-                    "Initramfs was successfully regenerated (detected type {initramfs_type:?})"
-                ))
-            }
-            Err(err) => Ok(format!("{err:#}")),
-        }
-    } else {
-        Err(anyhow!(
-            "Overclocking was not enabled through LACT (file at {MODULE_CONF_PATH} does not exist)"
-        ))
-    }
-}
-
 fn read_current_mask() -> anyhow::Result<u64> {
     let ppfeaturemask = fs::read_to_string(PP_FEATURE_MASK_PATH)?;
     let ppfeaturemask = ppfeaturemask
@@ -118,23 +64,13 @@ fn read_current_mask() -> anyhow::Result<u64> {
     u64::from_str_radix(ppfeaturemask, 16).context("Invalid ppfeaturemask")
 }
 
-async fn regenerate_initramfs() -> anyhow::Result<InitramfsType> {
-    let os_release = OS_RELEASE.as_ref().context("Could not detect distro")?;
-    match detect_initramfs_type(os_release).await {
-        Some(initramfs_type) => {
-            info!("Detected initramfs type {initramfs_type:?}, regenerating");
-            let result = match initramfs_type {
-                InitramfsType::Debian => run_command("update-initramfs", &["-u"]).await,
-                InitramfsType::Mkinitcpio => run_command("mkinitcpio", &["-P"]).await,
-                InitramfsType::Dracut => {
-                    run_command("dracut", &["--regenerate-all", "--force"]).await
-                }
-            };
-            result.map(|()| initramfs_type)
-        }
-        None => Err(anyhow!(
-            "Could not determine initramfs type, manual initramfs regeneration may be required"
-        )),
+fn is_overdrive_enabled_flag() -> anyhow::Result<bool> {
+    let overdrive_enabled = fs::read_to_string(OVERDRIVE_ENABLED_PATH)?;
+
+    if overdrive_enabled.trim() != "0" {
+        Ok(true)
+    } else {
+        Ok(false)
     }
 }
 
diff --git a/lact-gui/src/app.rs b/lact-gui/src/app.rs
index 7d667ff..c72114b 100644
--- a/lact-gui/src/app.rs
+++ b/lact-gui/src/app.rs
@@ -197,21 +197,6 @@ impl AsyncComponent for AppModel {
             }
         ));
 
-        if let Some(ref button) = oc_page.enable_overclocking_button {
-            button.connect_clicked(clone!(
-                #[strong]
-                sender,
-                move |_| {
-                    sender.input(AppMsg::ask_confirmation(
-                        AppMsg::EnableOverdrive,
-                        "Enable Overclocking",
-                        format!("This will enable the overdrive feature of the amdgpu driver by creating a file at <b>{MODULE_CONF_PATH}</b> and updating the initramfs. Are you sure you want to do this?"),
-                        gtk::ButtonsType::OkCancel,
-                    ));
-                }
-            ));
-        }
-
         let graphs_window = GraphsWindow::new();
 
         let model = AppModel {
@@ -336,12 +321,6 @@ impl AppModel {
             AppMsg::DebugSnapshot => {
                 self.generate_debug_snapshot(root).await;
             }
-            AppMsg::EnableOverdrive => {
-                toggle_overdrive(&self.daemon_client, true, root.clone()).await;
-            }
-            AppMsg::DisableOverdrive => {
-                toggle_overdrive(&self.daemon_client, false, root.clone()).await;
-            }
             AppMsg::ResetConfig => {
                 self.daemon_client.reset_config().await?;
                 sender.input(AppMsg::ReloadData { full: true });
@@ -952,32 +931,6 @@ fn confirmation_text(seconds_left: u64) -> String {
     format!("Do you want to keep the new settings? (Reverting in {seconds_left} seconds)")
 }
 
-async fn toggle_overdrive(daemon_client: &DaemonClient, enable: bool, root: ApplicationWindow) {
-    let dialog = spinner_dialog(&root, "Regenerating initramfs (this may take a while)");
-    dialog.show();
-
-    let result = if enable {
-        daemon_client
-            .enable_overdrive()
-            .await
-            .and_then(|buffer| buffer.inner())
-    } else {
-        daemon_client
-            .disable_overdrive()
-            .await
-            .and_then(|buffer| buffer.inner())
-    };
-
-    dialog.hide();
-
-    match result {
-        Ok(msg) => oc_toggled_dialog(false, &msg),
-        Err(err) => {
-            show_error(&root, &err);
-        }
-    }
-}
-
 fn spinner_dialog(parent: &ApplicationWindow, title: &str) -> MessageDialog {
     let spinner = gtk::Spinner::new();
     spinner.start();
@@ -1018,15 +971,6 @@ fn register_actions(sender: &AsyncComponentSender<AppModel>) {
         (ShowGraphsWindow, AppMsg::ShowGraphsWindow),
         (DumpVBios, AppMsg::DumpVBios),
         (DebugSnapshot, AppMsg::DebugSnapshot),
-        (
-            DisableOverdrive,
-            AppMsg::ask_confirmation(
-                AppMsg::DisableOverdrive,
-                "Disable Overclocking",
-                "This will disable overclocking support on next reboot.",
-                gtk::ButtonsType::OkCancel,
-            )
-        ),
         (
             ResetConfig,
             AppMsg::ask_confirmation(
@@ -1045,7 +989,6 @@ relm4::new_action_group!(AppActionGroup, "app");
 relm4::new_stateless_action!(ShowGraphsWindow, AppActionGroup, "show-graphs-window");
 relm4::new_stateless_action!(DumpVBios, AppActionGroup, "dump-vbios");
 relm4::new_stateless_action!(DebugSnapshot, AppActionGroup, "generate-debug-snapshot");
-relm4::new_stateless_action!(DisableOverdrive, AppActionGroup, "disable-overdrive");
 relm4::new_stateless_action!(ResetConfig, AppActionGroup, "reset-config");
 
 async fn create_connection() -> anyhow::Result<(DaemonClient, Option<anyhow::Error>)> {
diff --git a/lact-gui/src/app/header.rs b/lact-gui/src/app/header.rs
index 533ea24..9b9f955 100644
--- a/lact-gui/src/app/header.rs
+++ b/lact-gui/src/app/header.rs
@@ -1,6 +1,6 @@
 mod new_profile_dialog;
 
-use super::{AppMsg, DebugSnapshot, DisableOverdrive, DumpVBios, ResetConfig, ShowGraphsWindow};
+use super::{AppMsg, DebugSnapshot, DumpVBios, ResetConfig, ShowGraphsWindow};
 use glib::clone;
 use gtk::prelude::*;
 use gtk::*;
@@ -133,7 +133,6 @@ impl Component for Header {
                 "Dump VBIOS" => DumpVBios,
             } ,
             section! {
-                "Disable overclocking support" => DisableOverdrive,
                 "Reset all configuration" => ResetConfig,
             }
         }
diff --git a/lact-gui/src/app/msg.rs b/lact-gui/src/app/msg.rs
index f137aee..0b52e16 100644
--- a/lact-gui/src/app/msg.rs
+++ b/lact-gui/src/app/msg.rs
@@ -15,8 +15,6 @@ pub enum AppMsg {
     ShowGraphsWindow,
     DumpVBios,
     DebugSnapshot,
-    EnableOverdrive,
-    DisableOverdrive,
     ResetConfig,
     ReloadProfiles,
     SelectProfile(Option<String>),
diff --git a/lact-gui/src/app/pages/oc_page/mod.rs b/lact-gui/src/app/pages/oc_page/mod.rs
index 4ccd6fb..c83fafe 100644
--- a/lact-gui/src/app/pages/oc_page/mod.rs
+++ b/lact-gui/src/app/pages/oc_page/mod.rs
@@ -20,7 +20,8 @@ use std::collections::HashMap;
 use tracing::warn;
 
 const OVERCLOCKING_DISABLED_TEXT: &str = "Overclocking support is not enabled! \
-You can still change basic settings, but the more advanced clocks and voltage control will not be available.";
+Solus users note: Please ensure that you have rebooted after installing LACT for the first time \
+If this message still appears please ensure that you are using at least kernel 6.11.";
 
 #[derive(Clone)]
 pub struct OcPage {
@@ -31,7 +32,6 @@ pub struct OcPage {
     power_cap_section: PowerCapSection,
     pub power_states_frame: PowerStatesFrame,
     pub clocks_frame: ClocksFrame,
-    pub enable_overclocking_button: Option<Button>,
 }
 
 impl OcPage {
@@ -47,11 +47,8 @@ impl OcPage {
             .margin_end(20)
             .build();
 
-        let mut enable_overclocking_button = None;
-
         if system_info.amdgpu_overdrive_enabled == Some(false) {
-            let (warning_frame, button) = oc_warning_frame();
-            enable_overclocking_button = Some(button);
+            let (warning_frame) = oc_warning_frame();
             vbox.append(&warning_frame);
         }
 
@@ -87,7 +84,6 @@ impl OcPage {
             performance_frame: performance_level_frame,
             clocks_frame,
             power_cap_section,
-            enable_overclocking_button,
             power_states_frame,
         }
     }
@@ -185,7 +181,7 @@ impl OcPage {
     }
 }
 
-fn oc_warning_frame() -> (Frame, Button) {
+fn oc_warning_frame() -> (Frame) {
     let container = Frame::new(Some("Overclocking information"));
 
     container.set_label_align(0.3);
@@ -206,15 +202,9 @@ fn oc_warning_frame() -> (Frame, Button) {
         .wrap_mode(pango::WrapMode::Word)
         .build();
 
-    let enable_button = Button::builder()
-        .label("Enable Overclocking")
-        .halign(Align::End)
-        .build();
-
     vbox.append(&warning_label);
-    vbox.append(&enable_button);
 
     container.set_child(Some(&vbox));
 
-    (container, enable_button)
+    (container)
 }
diff --git a/lact-schema/src/request.rs b/lact-schema/src/request.rs
index 8afc65f..19aa649 100644
--- a/lact-schema/src/request.rs
+++ b/lact-schema/src/request.rs
@@ -70,8 +70,6 @@ pub enum Request<'a> {
     DeleteProfile {
         name: String,
     },
-    EnableOverdrive,
-    DisableOverdrive,
     GenerateSnapshot,
     ConfirmPendingConfig(ConfirmCommand),
     RestConfig,
